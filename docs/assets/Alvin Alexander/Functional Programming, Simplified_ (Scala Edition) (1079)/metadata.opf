<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" unique-identifier="uuid_id" version="2.0">
    <metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf">
        <dc:identifier opf:scheme="calibre" id="calibre_id">1079</dc:identifier>
        <dc:identifier opf:scheme="uuid" id="uuid_id">d57d708b-9fdd-4298-94ca-6e3fc20ac63b</dc:identifier>
        <dc:title>Functional Programming, Simplified: (Scala Edition)</dc:title>
        <dc:creator opf:file-as="Alexander, Alvin" opf:role="aut">Alvin Alexander</dc:creator>
        <dc:contributor opf:file-as="calibre" opf:role="bkp">calibre (5.31.1) [https://calibre-ebook.com]</dc:contributor>
        <dc:date>2017-12-07T11:21:41+00:00</dc:date>
        <dc:description>If you've had trouble trying to learn Functional Programming (FP), you're not alone. In this book, Alvin Alexander -- author of the Scala Cookbook and former teacher of Java and Object-Oriented Programming (OOP) classes -- writes about his own problems in trying to understand FP, and how he finally conquered it. What he originally learned is that experienced FP developers are driven by two goals: to use only immutable values, and write only pure functions. What he later learned is that they have these goals as the result of another larger goal: they want all of their code to look and work just like algebra. While that sounds simple, it turns out that these goals require them to use many advanced Scala features -- which they often use all at the same time. As a result, their code can look completely foreign to novice FP developers. As Mr. Alexander writes, "When you first see their code it's easy to ask, 'Why would anyone write code like this?'" Mr. Alexander answers that "Why?" question by explaining the benefits of writing pure functional code. Once you understand those benefits -- your motivation for learning FP -- he shares five rules for programming in the book:  All fields must be immutable ('val' fields). All functions must be pure functions. Null values are not allowed. Whenever you use an 'if' you must also use an 'else'. You won't create OOP classes that encapsulate data and behavior; instead you'll design data structures using Scala 'case' classes, and write pure functions that operate on those data structures.  In the book you'll see how those five, simple rules naturally lead you to write pure, functional code that reads like algebra. He also shares one more Golden Rule for learning:  Always ask "Why"?  Lessons in the book include:  How and why to write only pure functions Why pure function signatures are much more important than OOP method signatures Why recursion is a natural tool for functional programming, and how to write recursive algorithms Because the Scala 'for' expression is so important to FP, dozens of pages explain the details of how it works In the end you'll see that monads aren't that difficult because they're a natural extension of the Five Rules The book finishes with lessons on FP data modeling, and two main approaches for organizing your pure functions  As Mr. Alexander writes, "In this book I take the time to explain all of the concepts that are used to write FP code in Scala. As I learned from my own experience, once you understand the Five Rules and the small concepts, you can understand Scala/FP." Please note that because of the limits on how large a printed book can be, the paperback version does not include all of the chapters that are in the Kindle eBook. The following lessons are not in the paperback version:  Grandma's Cookies (a story about pure functions) The ScalaCheck lessons The Type Classes lessons The appendices  Because those lessons didn' fit in the print version, they have been made freely available online. (Alvin Alexander (alvinalexander.com) wrote the popular Scala Cookbook for O'Reilly, and also self-published two other books, How I Sold My Business: A Personal Diary, and A Survival Guide for New Consultants.)</dc:description>
        <dc:publisher>CreateSpace Independent Publishing Platform</dc:publisher>
        <dc:identifier opf:scheme="ISBN">9781979788786</dc:identifier>
        <dc:identifier opf:scheme="GOOGLE">y-33swEACAAJ</dc:identifier>
        <dc:identifier opf:scheme="MOBI-ASIN">B076J7CJKY</dc:identifier>
        <dc:language>eng</dc:language>
        <meta name="calibre:author_link_map" content="{&quot;Alvin Alexander&quot;: &quot;&quot;}"/>
        <meta name="calibre:timestamp" content="2020-11-19T07:29:33+00:00"/>
        <meta name="calibre:title_sort" content="Functional Programming, Simplified: (Scala Edition)"/>
    </metadata>
    <guide>
        <reference type="cover" title="Cover" href="cover.jpg"/>
    </guide>
</package>
